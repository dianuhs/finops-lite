[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "finops-lite"
version = "0.1.0"
description = "AWS FinOps CLI for cost visibility, optimization, and governance"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Diana", email = "your.email@example.com"},
]
keywords = ["aws", "finops", "cost-optimization", "cloud", "cli"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]

dependencies = [
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    "click>=8.1.7",
    "rich>=13.7.0",
    "pydantic>=2.5.0",
    "PyYAML>=6.0.1",
    "python-dateutil>=2.8.2",
    "tabulate>=0.9.0",
    "requests>=2.31.0",
    "jmespath>=1.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "black>=23.9.1",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    "boto3-stubs[essential]>=1.34.0",
]
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.6",
    "mkdocs-click>=0.8.1",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "moto[ec2,cost-explorer,resourcegroupstaggingapi]>=4.2.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/finops-lite"
Documentation = "https://github.com/yourusername/finops-lite/blob/main/README.md"
Repository = "https://github.com/yourusername/finops-lite.git"
"Bug Tracker" = "https://github.com/yourusername/finops-lite/issues"

[project.scripts]
finops = "finops_lite.cli:main"
finops-lite = "finops_lite.cli:main"

[tool.hatch.version]
path = "finops_lite/__init__.py"

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    "/.gitignore",
    "/.pre-commit-config.yaml",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["finops_lite"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow",
]

[tool.coverage.run]
source = ["finops_lite"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]